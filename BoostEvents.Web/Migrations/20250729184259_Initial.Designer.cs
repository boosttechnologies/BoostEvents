// <auto-generated />
using System;
using BoostEvents.Web.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BoostEvents.Web.Migrations
{
    [DbContext(typeof(BoostEventsDbContext))]
    [Migration("20250729184259_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BoostEvents.Web.Domain.AiLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uuid")
                        .HasColumnName("business_id");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_utc");

                    b.Property<DateTime?>("DeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_utc");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_utc");

                    b.Property<string>("Prompt")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasColumnName("prompt");

                    b.Property<string>("ResultPreview")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasColumnName("result_preview");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<int>("TokensUsed")
                        .HasColumnType("integer")
                        .HasColumnName("tokens_used");

                    b.HasKey("Id")
                        .HasName("pk_ai_logs");

                    b.HasIndex("BusinessId")
                        .HasDatabaseName("ix_ai_logs_business_id");

                    b.ToTable("ai_logs");
                });

            modelBuilder.Entity("BoostEvents.Web.Domain.ApiKey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_user_id");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_utc");

                    b.Property<DateTime?>("DeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_utc");

                    b.Property<DateTime?>("ExpiresUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_utc");

                    b.Property<string>("HashedKey")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("hashed_key");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean")
                        .HasColumnName("is_revoked");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_utc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("notes");

                    b.Property<string>("ScopeJson")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("scope_json");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.HasKey("Id")
                        .HasName("pk_api_keys");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("ix_api_keys_tenant_id");

                    b.ToTable("api_keys");
                });

            modelBuilder.Entity("BoostEvents.Web.Domain.AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Action")
                        .HasColumnType("integer")
                        .HasColumnName("action");

                    b.Property<Guid?>("BusinessId")
                        .HasColumnType("uuid")
                        .HasColumnName("business_id");

                    b.Property<Guid>("BusinessInstanceId")
                        .HasColumnType("uuid")
                        .HasColumnName("business_instance_id");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_utc");

                    b.Property<DateTime?>("DeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_utc");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("MetadataJson")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasColumnName("metadata_json");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_utc");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.HasKey("Id")
                        .HasName("pk_audit_logs");

                    b.HasIndex("BusinessId")
                        .HasDatabaseName("ix_audit_logs_business_id");

                    b.ToTable("audit_logs");
                });

            modelBuilder.Entity("BoostEvents.Web.Domain.Business", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_utc");

                    b.Property<DateTime?>("DeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_utc");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_utc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.HasKey("Id")
                        .HasName("pk_businesses");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("ix_businesses_tenant_id");

                    b.ToTable("businesses");
                });

            modelBuilder.Entity("BoostEvents.Web.Domain.BusinessInstance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uuid")
                        .HasColumnName("business_id");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_utc");

                    b.Property<DateTime?>("DeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_utc");

                    b.Property<DateTime>("EndUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_utc");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_utc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<DateTime>("StartUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_utc");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.HasKey("Id")
                        .HasName("pk_business_instances");

                    b.HasIndex("BusinessId")
                        .HasDatabaseName("ix_business_instances_business_id");

                    b.ToTable("business_instances");
                });

            modelBuilder.Entity("BoostEvents.Web.Domain.DeviceToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BusinessInstanceId")
                        .HasColumnType("uuid")
                        .HasColumnName("business_instance_id");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_utc");

                    b.Property<DateTime?>("DeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_utc");

                    b.Property<int>("DeviceType")
                        .HasColumnType("integer")
                        .HasColumnName("device_type");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_utc");

                    b.Property<Guid?>("PairedByUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("paired_by_user_id");

                    b.Property<string>("PairingMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("pairing_method");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("serial_number");

                    b.Property<string>("SettingsEncryptedJson")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasColumnName("settings_encrypted_json");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<string>("ZoneId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("zone_id");

                    b.HasKey("Id")
                        .HasName("pk_device_tokens");

                    b.HasIndex("BusinessInstanceId")
                        .HasDatabaseName("ix_device_tokens_business_instance_id");

                    b.ToTable("device_tokens");
                });

            modelBuilder.Entity("BoostEvents.Web.Domain.Discount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("AmountOff")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("amount_off");

                    b.Property<Guid>("BusinessInstanceId")
                        .HasColumnType("uuid")
                        .HasColumnName("business_instance_id");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_utc");

                    b.Property<DateTime?>("DeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_utc");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsPercentage")
                        .HasColumnType("boolean")
                        .HasColumnName("is_percentage");

                    b.Property<bool>("IsStackable")
                        .HasColumnType("boolean")
                        .HasColumnName("is_stackable");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_utc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.HasKey("Id")
                        .HasName("pk_discounts");

                    b.ToTable("discounts");
                });

            modelBuilder.Entity("BoostEvents.Web.Domain.DiscountCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_utc");

                    b.Property<DateTime?>("DeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_utc");

                    b.Property<Guid>("DiscountId")
                        .HasColumnType("uuid")
                        .HasColumnName("discount_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsSingleUse")
                        .HasColumnType("boolean")
                        .HasColumnName("is_single_use");

                    b.Property<int?>("MaxUses")
                        .HasColumnType("integer")
                        .HasColumnName("max_uses");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_utc");

                    b.Property<Guid>("SaleItemId")
                        .HasColumnType("uuid")
                        .HasColumnName("sale_item_id");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.HasKey("Id")
                        .HasName("pk_discount_code");

                    b.HasIndex("DiscountId")
                        .HasDatabaseName("ix_discount_code_discount_id");

                    b.HasIndex("SaleItemId")
                        .HasDatabaseName("ix_discount_code_sale_item_id");

                    b.ToTable("discount_code");
                });

            modelBuilder.Entity("BoostEvents.Web.Domain.FormField", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_utc");

                    b.Property<DateTime?>("DeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_utc");

                    b.Property<int>("FieldType")
                        .HasColumnType("integer")
                        .HasColumnName("field_type");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("label");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_utc");

                    b.Property<string>("OptionsJson")
                        .HasColumnType("text")
                        .HasColumnName("options_json");

                    b.Property<Guid?>("TemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("template_id");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<Guid>("WorkflowStepId")
                        .HasColumnType("uuid")
                        .HasColumnName("workflow_step_id");

                    b.HasKey("Id")
                        .HasName("pk_form_fields");

                    b.HasIndex("TemplateId")
                        .HasDatabaseName("ix_form_fields_template_id");

                    b.HasIndex("WorkflowStepId")
                        .HasDatabaseName("ix_form_fields_workflow_step_id");

                    b.ToTable("form_fields");
                });

            modelBuilder.Entity("BoostEvents.Web.Domain.FormFieldTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_utc");

                    b.Property<DateTime?>("DeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_utc");

                    b.Property<int>("FieldType")
                        .HasColumnType("integer")
                        .HasColumnName("field_type");

                    b.Property<Guid>("FormTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("form_template_id");

                    b.Property<string>("HelpText")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("help_text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("label");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_utc");

                    b.Property<string>("OptionsJson")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasColumnName("options_json");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.HasKey("Id")
                        .HasName("pk_form_field_templates");

                    b.HasIndex("FormTemplateId")
                        .HasDatabaseName("ix_form_field_templates_form_template_id");

                    b.ToTable("form_field_templates");
                });

            modelBuilder.Entity("BoostEvents.Web.Domain.FormTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BusinessInstanceId")
                        .HasColumnType("uuid")
                        .HasColumnName("business_instance_id");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_utc");

                    b.Property<DateTime?>("DeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_utc");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_utc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.HasKey("Id")
                        .HasName("pk_form_template");

                    b.HasIndex("BusinessInstanceId")
                        .HasDatabaseName("ix_form_template_business_instance_id");

                    b.ToTable("form_template");
                });

            modelBuilder.Entity("BoostEvents.Web.Domain.SaleItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BusinessInstanceId")
                        .HasColumnType("uuid")
                        .HasColumnName("business_instance_id");

                    b.Property<string>("Category")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("category");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_utc");

                    b.Property<DateTime?>("DeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_utc");

                    b.Property<string>("Description")
                        .HasMaxLength(750)
                        .HasColumnType("character varying(750)")
                        .HasColumnName("description");

                    b.Property<int?>("InventoryCount")
                        .HasColumnType("integer")
                        .HasColumnName("inventory_count");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsVisibleToPublic")
                        .HasColumnType("boolean")
                        .HasColumnName("is_visible_to_public");

                    b.Property<int?>("MaxQuantity")
                        .HasColumnType("integer")
                        .HasColumnName("max_quantity");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_utc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.HasKey("Id")
                        .HasName("pk_sale_items");

                    b.HasIndex("BusinessInstanceId")
                        .HasDatabaseName("ix_sale_items_business_instance_id");

                    b.ToTable("sale_items");
                });

            modelBuilder.Entity("BoostEvents.Web.Domain.SaleItemPriceTier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_utc");

                    b.Property<DateTime?>("DeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_utc");

                    b.Property<DateTime>("EndUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_utc");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_utc");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("price");

                    b.Property<Guid>("SaleItemId")
                        .HasColumnType("uuid")
                        .HasColumnName("sale_item_id");

                    b.Property<DateTime>("StartUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_utc");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.HasKey("Id")
                        .HasName("pk_sale_item_price_tiers");

                    b.HasIndex("SaleItemId")
                        .HasDatabaseName("ix_sale_item_price_tiers_sale_item_id");

                    b.ToTable("sale_item_price_tiers");
                });

            modelBuilder.Entity("BoostEvents.Web.Domain.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_utc");

                    b.Property<DateTime?>("DeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_utc");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_utc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Slug")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("slug");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.HasKey("Id")
                        .HasName("pk_tenants");

                    b.ToTable("tenants");
                });

            modelBuilder.Entity("BoostEvents.Web.Domain.TenantAiUsage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_utc");

                    b.Property<DateTime?>("DeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_utc");

                    b.Property<string>("FeatureBreakdownJson")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasColumnName("feature_breakdown_json");

                    b.Property<int>("ImagesGenerated")
                        .HasColumnType("integer")
                        .HasColumnName("images_generated");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_utc");

                    b.Property<DateTime>("PeriodEndUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("period_end_utc");

                    b.Property<DateTime>("PeriodStartUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("period_start_utc");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<int>("TokensUsed")
                        .HasColumnType("integer")
                        .HasColumnName("tokens_used");

                    b.HasKey("Id")
                        .HasName("pk_tenant_ai_usages");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("ix_tenant_ai_usages_tenant_id");

                    b.ToTable("tenant_ai_usages");
                });

            modelBuilder.Entity("BoostEvents.Web.Domain.TenantClient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BusinessInstanceId")
                        .HasColumnType("uuid")
                        .HasColumnName("business_instance_id");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_utc");

                    b.Property<DateTime?>("DeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_utc");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("ExternalReferenceId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("external_reference_id");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_name");

                    b.Property<string>("MetadataJson")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasColumnName("metadata_json");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_utc");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("phone");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.HasKey("Id")
                        .HasName("pk_clients");

                    b.HasIndex("BusinessInstanceId")
                        .HasDatabaseName("ix_clients_business_instance_id");

                    b.ToTable("clients");
                });

            modelBuilder.Entity("BoostEvents.Web.Domain.TenantPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("AllowApiAccess")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_api_access");

                    b.Property<bool>("AllowImageGeneration")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_image_generation");

                    b.Property<bool>("AllowWorkflowAutomation")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_workflow_automation");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_utc");

                    b.Property<DateTime?>("DeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_utc");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int>("MaxAiTokensPerMonth")
                        .HasColumnType("integer")
                        .HasColumnName("max_ai_tokens_per_month");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_utc");

                    b.Property<DateTime?>("PlanEndUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("plan_end_utc");

                    b.Property<string>("PlanName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("plan_name");

                    b.Property<DateTime>("PlanStartUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("plan_start_utc");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.HasKey("Id")
                        .HasName("pk_tenant_plans");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("ix_tenant_plans_tenant_id");

                    b.ToTable("tenant_plans");
                });

            modelBuilder.Entity("BoostEvents.Web.Domain.Workflow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BusinessInstanceId")
                        .HasColumnType("uuid")
                        .HasColumnName("business_instance_id");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_utc");

                    b.Property<DateTime?>("DeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_utc");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_utc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.HasKey("Id")
                        .HasName("pk_workflows");

                    b.HasIndex("BusinessInstanceId")
                        .HasDatabaseName("ix_workflows_business_instance_id");

                    b.ToTable("workflows");
                });

            modelBuilder.Entity("BoostEvents.Web.Domain.WorkflowStep", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_utc");

                    b.Property<DateTime?>("DeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_utc");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("label");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_utc");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<Guid>("WorkflowId")
                        .HasColumnType("uuid")
                        .HasColumnName("workflow_id");

                    b.HasKey("Id")
                        .HasName("pk_workflow_steps");

                    b.HasIndex("WorkflowId")
                        .HasDatabaseName("ix_workflow_steps_workflow_id");

                    b.ToTable("workflow_steps");
                });

            modelBuilder.Entity("BoostEvents.Web.Domain.WorkflowStepAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AnswerValue")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasColumnName("answer_value");

                    b.Property<DateTime>("AnsweredUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("answered_utc");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_utc");

                    b.Property<DateTime?>("DeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_utc");

                    b.Property<Guid?>("FormFieldId")
                        .HasColumnType("uuid")
                        .HasColumnName("form_field_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_utc");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<Guid>("WorkflowStepId")
                        .HasColumnType("uuid")
                        .HasColumnName("workflow_step_id");

                    b.Property<Guid>("WorkflowSubmissionId")
                        .HasColumnType("uuid")
                        .HasColumnName("workflow_submission_id");

                    b.HasKey("Id")
                        .HasName("pk_workflow_step_answers");

                    b.HasIndex("WorkflowSubmissionId")
                        .HasDatabaseName("ix_workflow_step_answers_workflow_submission_id");

                    b.ToTable("workflow_step_answers");
                });

            modelBuilder.Entity("BoostEvents.Web.Domain.WorkflowStepRule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ActionJson")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasColumnName("action_json");

                    b.Property<string>("ConditionJson")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasColumnName("condition_json");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_utc");

                    b.Property<DateTime?>("DeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_utc");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_utc");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<Guid>("WorkflowStepId")
                        .HasColumnType("uuid")
                        .HasColumnName("workflow_step_id");

                    b.HasKey("Id")
                        .HasName("pk_workflow_step_rules");

                    b.HasIndex("WorkflowStepId")
                        .HasDatabaseName("ix_workflow_step_rules_workflow_step_id");

                    b.ToTable("workflow_step_rules");
                });

            modelBuilder.Entity("BoostEvents.Web.Domain.WorkflowSubmission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BusinessInstanceId")
                        .HasColumnType("uuid")
                        .HasColumnName("business_instance_id");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uuid")
                        .HasColumnName("client_id");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_utc");

                    b.Property<DateTime?>("DeletedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_utc");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_utc");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("notes");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<Guid?>("SubmittedByUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("submitted_by_user_id");

                    b.Property<DateTime>("SubmittedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("submitted_utc");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<Guid>("WorkflowId")
                        .HasColumnType("uuid")
                        .HasColumnName("workflow_id");

                    b.HasKey("Id")
                        .HasName("pk_workflow_submissions");

                    b.ToTable("workflow_submissions");
                });

            modelBuilder.Entity("BoostEvents.Web.Domain.AiLog", b =>
                {
                    b.HasOne("BoostEvents.Web.Domain.Business", null)
                        .WithMany("AiLogs")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ai_logs__businesses_business_id");
                });

            modelBuilder.Entity("BoostEvents.Web.Domain.ApiKey", b =>
                {
                    b.HasOne("BoostEvents.Web.Domain.Tenant", null)
                        .WithMany("ApiKeys")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_api_keys__tenants_tenant_id");
                });

            modelBuilder.Entity("BoostEvents.Web.Domain.AuditLog", b =>
                {
                    b.HasOne("BoostEvents.Web.Domain.Business", null)
                        .WithMany("AuditLogs")
                        .HasForeignKey("BusinessId")
                        .HasConstraintName("fk_audit_logs__businesses_business_id");
                });

            modelBuilder.Entity("BoostEvents.Web.Domain.Business", b =>
                {
                    b.HasOne("BoostEvents.Web.Domain.Tenant", null)
                        .WithMany("Businesses")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_businesses__tenants_tenant_id");
                });

            modelBuilder.Entity("BoostEvents.Web.Domain.BusinessInstance", b =>
                {
                    b.HasOne("BoostEvents.Web.Domain.Business", null)
                        .WithMany("Instances")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_business_instances_businesses_business_id");
                });

            modelBuilder.Entity("BoostEvents.Web.Domain.DeviceToken", b =>
                {
                    b.HasOne("BoostEvents.Web.Domain.BusinessInstance", null)
                        .WithMany("Devices")
                        .HasForeignKey("BusinessInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_device_tokens_business_instances_business_instance_id");
                });

            modelBuilder.Entity("BoostEvents.Web.Domain.DiscountCode", b =>
                {
                    b.HasOne("BoostEvents.Web.Domain.Discount", "Discount")
                        .WithMany("DiscountCodes")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_discount_code_discounts_discount_id");

                    b.HasOne("BoostEvents.Web.Domain.SaleItem", "SaleItem")
                        .WithMany("DiscountCodes")
                        .HasForeignKey("SaleItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_discount_code__sale_items_sale_item_id");

                    b.Navigation("Discount");

                    b.Navigation("SaleItem");
                });

            modelBuilder.Entity("BoostEvents.Web.Domain.FormField", b =>
                {
                    b.HasOne("BoostEvents.Web.Domain.FormFieldTemplate", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId")
                        .HasConstraintName("fk_form_fields__form_field_templates_template_id");

                    b.HasOne("BoostEvents.Web.Domain.WorkflowStep", "Step")
                        .WithMany("Fields")
                        .HasForeignKey("WorkflowStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_form_fields__workflow_steps_workflow_step_id");

                    b.Navigation("Step");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("BoostEvents.Web.Domain.FormFieldTemplate", b =>
                {
                    b.HasOne("BoostEvents.Web.Domain.FormTemplate", null)
                        .WithMany("Fields")
                        .HasForeignKey("FormTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_form_field_templates__form_template_form_template_id");
                });

            modelBuilder.Entity("BoostEvents.Web.Domain.FormTemplate", b =>
                {
                    b.HasOne("BoostEvents.Web.Domain.BusinessInstance", null)
                        .WithMany("FormTemplates")
                        .HasForeignKey("BusinessInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_form_template_business_instances_business_instance_id");
                });

            modelBuilder.Entity("BoostEvents.Web.Domain.SaleItem", b =>
                {
                    b.HasOne("BoostEvents.Web.Domain.BusinessInstance", null)
                        .WithMany("SaleItems")
                        .HasForeignKey("BusinessInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sale_items_business_instances_business_instance_id");
                });

            modelBuilder.Entity("BoostEvents.Web.Domain.SaleItemPriceTier", b =>
                {
                    b.HasOne("BoostEvents.Web.Domain.SaleItem", "SaleItem")
                        .WithMany("PriceTiers")
                        .HasForeignKey("SaleItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sale_item_price_tiers_sale_items_sale_item_id");

                    b.Navigation("SaleItem");
                });

            modelBuilder.Entity("BoostEvents.Web.Domain.TenantAiUsage", b =>
                {
                    b.HasOne("BoostEvents.Web.Domain.Tenant", null)
                        .WithMany("AiUsages")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tenant_ai_usages_tenants_tenant_id");
                });

            modelBuilder.Entity("BoostEvents.Web.Domain.TenantClient", b =>
                {
                    b.HasOne("BoostEvents.Web.Domain.BusinessInstance", null)
                        .WithMany("Clients")
                        .HasForeignKey("BusinessInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_clients_business_instances_business_instance_id");
                });

            modelBuilder.Entity("BoostEvents.Web.Domain.TenantPlan", b =>
                {
                    b.HasOne("BoostEvents.Web.Domain.Tenant", "Tenant")
                        .WithMany("Plans")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tenant_plans_tenants_tenant_id");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("BoostEvents.Web.Domain.Workflow", b =>
                {
                    b.HasOne("BoostEvents.Web.Domain.BusinessInstance", null)
                        .WithMany("Workflows")
                        .HasForeignKey("BusinessInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_workflows_business_instances_business_instance_id");
                });

            modelBuilder.Entity("BoostEvents.Web.Domain.WorkflowStep", b =>
                {
                    b.HasOne("BoostEvents.Web.Domain.Workflow", null)
                        .WithMany("Steps")
                        .HasForeignKey("WorkflowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_workflow_steps_workflows_workflow_id");
                });

            modelBuilder.Entity("BoostEvents.Web.Domain.WorkflowStepAnswer", b =>
                {
                    b.HasOne("BoostEvents.Web.Domain.WorkflowSubmission", null)
                        .WithMany("StepAnswers")
                        .HasForeignKey("WorkflowSubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_workflow_step_answers__workflow_submissions_workflow_submissi~");
                });

            modelBuilder.Entity("BoostEvents.Web.Domain.WorkflowStepRule", b =>
                {
                    b.HasOne("BoostEvents.Web.Domain.WorkflowStep", null)
                        .WithMany("Rules")
                        .HasForeignKey("WorkflowStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_workflow_step_rules_workflow_steps_workflow_step_id");
                });

            modelBuilder.Entity("BoostEvents.Web.Domain.Business", b =>
                {
                    b.Navigation("AiLogs");

                    b.Navigation("AuditLogs");

                    b.Navigation("Instances");
                });

            modelBuilder.Entity("BoostEvents.Web.Domain.BusinessInstance", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("Devices");

                    b.Navigation("FormTemplates");

                    b.Navigation("SaleItems");

                    b.Navigation("Workflows");
                });

            modelBuilder.Entity("BoostEvents.Web.Domain.Discount", b =>
                {
                    b.Navigation("DiscountCodes");
                });

            modelBuilder.Entity("BoostEvents.Web.Domain.FormTemplate", b =>
                {
                    b.Navigation("Fields");
                });

            modelBuilder.Entity("BoostEvents.Web.Domain.SaleItem", b =>
                {
                    b.Navigation("DiscountCodes");

                    b.Navigation("PriceTiers");
                });

            modelBuilder.Entity("BoostEvents.Web.Domain.Tenant", b =>
                {
                    b.Navigation("AiUsages");

                    b.Navigation("ApiKeys");

                    b.Navigation("Businesses");

                    b.Navigation("Plans");
                });

            modelBuilder.Entity("BoostEvents.Web.Domain.Workflow", b =>
                {
                    b.Navigation("Steps");
                });

            modelBuilder.Entity("BoostEvents.Web.Domain.WorkflowStep", b =>
                {
                    b.Navigation("Fields");

                    b.Navigation("Rules");
                });

            modelBuilder.Entity("BoostEvents.Web.Domain.WorkflowSubmission", b =>
                {
                    b.Navigation("StepAnswers");
                });
#pragma warning restore 612, 618
        }
    }
}
