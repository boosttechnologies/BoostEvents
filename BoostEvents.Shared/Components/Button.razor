
@using Microsoft.Extensions.Logging
@inject IButtonService ButtonService
@inject NavigationManager NavigationManager
@inject ILogger<Button> Log
@inject IApplicationTheme Theme

@if (Url.Length > 0)
{
    <NavLink
        href="@Url"
        class="@ButtonCss"
        disabled="@IsLoading"
        aria-busy="@IsLoading.ToString().ToLower()"
        aria-label="@AriaLabel"
        ActiveClass="@ActiveClassCss">
    
        <div class="flex gap-x-3 items-center">
            @if (IsLoading)
            {
                <span class="animate-spin inline-block w-4 h-4 border-2 border-t-2 border-transparent border-blue-500 rounded-full"></span>
            }
            else
            {
                @if (!string.IsNullOrEmpty(LeftIconClass))
                {
                    <span>
                        <i class="fa fa-xl fa-duotone fa-solid @LeftIconClass"></i>
                    </span>
                }

                @if (!string.IsNullOrEmpty(Text))
                {
                    <span>@Text</span>
                }
            }
        </div>
        @if (!string.IsNullOrEmpty(RightIconClass) && !KillIconRight)
        {
            <span>
                <i class="fa fa-xl fa-duotone fa-solid @RightIconClass"></i>
            </span>
        }
    </NavLink>
}
else
{
    <NavLink
        @onclick="HandleClick"
        class="@ButtonCss"
        disabled="@IsLoading"
        aria-busy="@IsLoading.ToString().ToLower()"
        aria-label="@AriaLabel" >
    
        <div class="flex gap-x-3 items-center">
            @if (IsLoading)
            {
                <span class="animate-spin inline-block w-4 h-4 border-2 border-t-2 border-transparent border-blue-500 rounded-full"></span>
            }
            else
            {
                @if (!string.IsNullOrEmpty(LeftIconClass))
                {
                    <span>
                        <i class="fa fa-xl fa-duotone fa-solid @LeftIconClass"></i>
                    </span>
                }

                @if (!string.IsNullOrEmpty(Text))
                {
                    <span>@Text</span>
                }
            }
        </div>
        @if (!string.IsNullOrEmpty(RightIconClass) && !KillIconRight)
        {
            <span>
                <i class="fa fa-xl fa-duotone fa-solid @RightIconClass"></i>
            </span>
        }
        @if (IsDropdownOpen)
        {
            <Card Css="@DropdownCss" PaddingClass="p-3">
                
                @foreach (var item in DropdownItems)
                {
                    <Button
                        Text="@item.Text"
                        OnClick="() => OnDropdownItemClick(item)"
                        LeftIconClass="fa-settings"
                        Color="ComponentStyle.ColorScheme.TransparentSecondary"/>

                    if (DropdownLoopCount % 2 == 0)
                    {
                        <Seperator/>
                    }
                    
                    DropdownLoopCount++;
                }
            </Card>
        }
    </NavLink>
}


@code {
    [Parameter] public string? Text { get; set; }
    [Parameter] public string LeftIconClass { get; set; } = string.Empty;
    [Parameter] public string RightIconClass { get; set; } = string.Empty;
    [Parameter] public bool IsLoading { get; set; }
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public string CustomCss { get; set; } = string.Empty;
    [Parameter] public string AriaLabel { get; set; } = string.Empty;
    [Parameter] public EventCallback<MouseEventArgs> OnClick { get; set; }
    [Parameter] public string Size { get; set; } = "medium";
    [Parameter] public ComponentStyle.ColorScheme Color { get; set; } = ComponentStyle.ColorScheme.Primary;
    [Parameter] public string Url { get; set; } = string.Empty;
    [Parameter] public List<DropdownItem> DropdownItems { get; set; } = new List<DropdownItem>();  // List of dropdown items with actions
    [Parameter] public EventCallback<string> OnDropdownItemSelected { get; set; }
    [Parameter] public ButtonDropdownPosition DropdownPosition { get; set; }
    [Parameter] public bool KillIconRight { get; set; }
    [Parameter] public string ActiveClassCss { get; set; } = "default:__bg-gray-800__";
    
    private string ButtonCss { get; set; } = string.Empty;
    private string DropdownCss { get; set; } = string.Empty;
    private bool IsDropdownOpen { get; set; } = false;
    private int DropdownLoopCount;
    
    protected override void OnInitialized()
    {
        // Subscribe to the service event
        Theme.OnChange += HandleThemeChange;
    }
    
    private void HandleThemeChange()
    {
        BuildActiveClass();
        InvokeAsync(StateHasChanged);
    }
    

    protected override void OnParametersSet()
    {
        var componentStyles = ComponentBuilder.BuildButtonCSS(Size, Color, DropdownPosition);
        ButtonCss = componentStyles["ButtonCss"];
        DropdownCss = componentStyles["DropdownCss"];
        
        if (DropdownItems.Count > 0)
            RightIconClass = "fa-chevron-down";
        
        if (Theme is null)
            return;

        /*if (NavigationManager.Uri != $"{NavigationManager.BaseUri}{Url}") return;*/
        BuildActiveClass();
    }

    private void BuildActiveClass()
    {
        ActiveClassCss = Theme.Settings.Mode == ApplicationTheme.ColorMode.Dark ? "dark:bg-gray-800" : "bg-zinc-900/10";
    }

    private void ToggleDropdown()
    {
        if (Disabled || IsLoading) return;
        IsDropdownOpen = !IsDropdownOpen;
        RightIconClass = IsDropdownOpen ? "fa-chevron-up" : "fa-chevron-down";
        StateHasChanged();
    }

    private async Task OnDropdownItemClick(DropdownItem item)
    {
   
        await item.OnClick();
        if (OnDropdownItemSelected.HasDelegate)
        {
            await OnDropdownItemSelected.InvokeAsync(item.Text);
        }
        StateHasChanged();
    }

    private async Task HandleClick(MouseEventArgs e)
    {
        if (Disabled || IsLoading) return;
        
        if (DropdownItems.Count > 0)
        {
            ToggleDropdown();
            return;
        }
        
        if (!string.IsNullOrEmpty(Url))
        {
            NavigationManager.NavigateTo(Url);
            Log.LogInformation("Update CSS to remove or add active class");
        }
        else if (OnClick.HasDelegate)
        {
            IsLoading = true;
            await OnClick.InvokeAsync(e);
            IsLoading = false;
        }
    }
    
    public class DropdownItem(string text, Func<Task> onClick)
    {
        public string Text { get; set; } = text; // The display text for the item
        public Func<Task> OnClick { get; set; } = onClick; // The action to execute on item click
    }
    
    public enum ButtonDropdownPosition
    {
        Top,
        TopRight,
        Bottom,
        BottomRight,
        InsetBottomRight,
        Right,
        Left
    }
    
    public void Dispose()
    {
        Theme.OnChange -= HandleThemeChange;
    }

    protected override bool ShouldRender()
    {
        return !IsLoading;
    }
}